JSON Types:
JSON is a data representation format,so we need to able to represent a certain data types within
it and JSON natively supports Strings,Numbers and these numbers can be in any format.

Strings: "Hello World","Kyle","l"

Numbers:  10,1.5,-30,1.2e10

They are decimal numbers,whole numbers,negative numbers,even scientific notation numbers.
It supports boolean which can be either true or fasle.

Boolean : true or false.

Null: It supports null which essentially stands for nothing.

Arrays: which can be a list of any of the types that we have talked about
[1,2,3] ["Hello","World"]

The Object:
The Object is the most complex but most used type within JSON And allows you to represent values
that are key-value pairs so you give it a key and then a value and that value can be anything of 
the other types we have talked about so string,number,boolean,array and any of those different
types can be the value for a key,so lets dive into the example.

Objects: {"key":"value"} {"age":30}

of how to use JSON inside of a file,the first thing that we need to do is to create a file
with the .json extension at the end of your file.
Inside the JSON file, what you do is take one of the types that we talked about.
and put that inside of a file so for example you could put a string you could put a number,
put a boolean whatever type you want inside of that file and thats valid JSON.
But if you all have a single string or a single number,it's not very useful to have a whole file 
for that single input so what most of the time when you are working with JSON,you will have either an 
array or an object as your top level of your file and then inside of that array or object 
you will have other values,so it may even have other objects have other arrays or have 
individual values such as strings or numbers inside of that so lets take an example of a user 
object that we want to put at the top level of our JSON file,which we are going to call user.json.

To create an object we need { } braces and inside of that we put all of the key value pairs,
that make up our object and every single one of those key-value pairs,the key must be surrounded
by double quotes " " followed by a colon and the value for that key.
{
"key":"value",
"key":"value"
}

And then if we have multiple key value pairs we need commas seperating every single one of our
key-value pairs.Similarly,to how we would create an array in a normal programming language.

For eg.

uer.json
{
  "name":"Kyle",//Strings
  "favoriteNumber":3,//Number
  "isProgrammer":true,//Boolean
  "hobbies":["Weight Lifting","Bowling"],//Array
   "friends":[{    
     "name":"Kyle",//Strings
     "favoriteNumber":3,//Number
     "isProgrammer":true,//Boolean
     "friends":[...],//Array
     }]
}
// More user Objects inside of that array.So we can put different user objects inside of that
array and now we have nesting of arrays with objects and thats how you really get into the 
power of JSON where you can start to deeply nest different properties and really show a heirarchy of
data as opposed to just a flat format of data like most data format files give you.
For eg the "friends" array could have a friends array and it can have the same properties of name
,favoriteNumber,isProgrammer,hobbies and even friends inside of that and you can start to get a
very deeply nested array,if you really want it.
We don't put a , on the very last property value,key pair we have.
Close it with a curly brace and thats our full JSON file created.

Most of the time when you are dealing with JSON,you are going to get it back as a string
and not as an actual Javascript Object.

To emulate that lets surround that in backticks ``.

      `[
            {
                "name": "Big Corporation",
                "numberOfEmployees": 10000,
                "ceo": "Mary",
                "rating": 3.6
            },
            {

                "name": "Small Startup",
                "numberOfEmployees": 3,
                "ceo": null,
                "rating": 4.2
            }
        ]`

console.log(companies);
And we can check that out inside of our browser here as you can see we have logged the companies 
variable.
0: {name: "Big Corporation", numberOfEmployees: 10000, ceo: "Mary", rating: 3.6}
1: {name: "Small Startup", numberOfEmployees: 3, ceo: null, rating: 4.2}

Most of the time when you are dealing with JSON,you are going to get it back as a string and 
not as an actual Javascript Object,so to emulate that will surround this in backticks '',so 
there is an actual string and if you save that you will see that our console just has a string
instead of an actual object and we can't actually use this object inside of our Javascript.

So,in order to convert this JSON String into a Javascript Object we need to use whats called
JSON.parse
console.log(JSON.parse(companies));
We pass it a string.It will take that string and convert it into a Javascript Object.
0: {name: "Big Corporation", numberOfEmployees: 10000, ceo: "Mary", rating: 3.6}
1: {name: "Small Startup", numberOfEmployees: 3, ceo: null, rating: 4.2}

it extremely light weight so when you send it across the internet through different API's,it will
take a very little amount of space which means it will quickly send back and forth which gives 
your user a great end experience.

Traversy Media:
JSON is important if you are using Restfull API's and sending data back and forth.
It's pretty much replaced XML in that area.

What is JSON?
1.Javascript Object Notation:
2.Lightweight data-interchange format:used to send data back and forth to a server,as text 
3.Based on a subset of Javascript
4.Easy to read and write.
5.Often used with AJAX.(Asynchronous Javascript in XML).
6.AJAX uses JSON more than it does with XML which is actually in its name.
7.AJAX is used to send data back and forth from client and server without having to refresh the
page in the browser.
8.How we can make an AJAX request to the JSON file,and output the content in the browser?
9.JSON can also be parsed with almost any modern languages either natively or through libararies,
so even if you are not a Javascript Developer,learning JSON is extremely relevant and I would also
suggest that any programmer should learn Javascript anyways.

Data Types:
1.Numbers:No difference between integer and floats or floats.They are all looked at as numbers.
If we use a numeric with no quotes around it that would be looked at as a number.
2.String:String of Unicode characters.Use double quotes.
These must be wrapped in double quotes.
3.Boolean : true or false.
4.Arrays:Ordered list of 0 or more values.
Arrays are aslo wrapped in [] brackets just like in regular Javascript or any programming
language.
5.We can aslo embed child objects which are undordered collection of key/value pairs.
and we have multi-teared Objects embedded in the JSON Object.
6.Null: which is an empty value.

When working with object literals we can use any standard Javascript including functions,dates,
But if its specified as json values,need to fit into one of these.We do have supersets of JSONs,
such as BSON which is used by MongoDB that can allow additional datatypes but that's beyond this
course.
JSON Syntax Rules:

1.use key/value pairs - {"name":"Brad"}
2.uses double quotes around KEY and VALUE.
If this was a Javascript Object Literal we wouldn't need the quotes around the key just the
string value but if we wanted this to be parsed as json as valid json,we need the double quotes,
around both the key and the value.
If it's valid json,its also much must follow the specific data types that we just described.      
3.Must use the specified data types.
4.File type is ".json".
5.The MIME type associated with json is "Application/json".
So,say if you are working with restfull API that you want to send JSON,you can use this type.
in the header.


JSON example:
{
 
   "name":"Brad Traversy",//String
   "age":35,//Number
   "address":{ // Embedded Object
         "street":"5 ,main st",
         "city":"Boston
   },

   "children":["Brianna","Nicholas"] //Array Of Strings.
}

// Uses multiple data-types.

<body>
    <script>
        var person = {
            name: "Brad"
        };
        console.log(person);//Object name: "Brad" works in javascript but not valid JSON.
        //go to JSONLint.com is a JSON validator. ---> https://jsonlint.com/
    </script>

</body>


->set the datatype to anything that we can do in Javascript.
->even a function -> not a valid JSON.
email: function(){
                return 'brad@gmail.com';
            }
Offcourse that is not valid.
Its has to be one of the datatypes specified which is Number,String,Boolean,null and array and
Object.
var person = {
            name: "Brad",
            age : 35,
            // email: function(){
            //     return 'brad@gmail.com';
            // }
        };

We can prepare this as JSON if we wanted to send it through AJAX to server or do something that
requires it to be valid JSON.We can actually change it to a adjacent string so to do that,
we can use a function called stringify so what I will do is

person = JSON.stringify(person);
pass the person Object from above.
console.log(person);//gives us a string which is formatted correctly quotes around the keys
and around the string but not around the number.


That's valid JSON you can send to a server.
Same JSON string,Turn it back to an Object:
console.log(person)//gives undefined.

person = JSON.parse(person);//to Object.

See code:

We are going to create a JSON file and a people array in JSON and fetch that data 
through AJAX and output it onto the screen.

See Code:



























