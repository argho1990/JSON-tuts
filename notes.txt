JSON Types:
JSON is a data representation format,so we need to able to represent a certain data types within
it and JSON natively supports Strings,Numbers and these numbers can be in any format.

Strings: "Hello World","Kyle","l"

Numbers:  10,1.5,-30,1.2e10

They are decimal numbers,whole numbers,negative numbers,even scientific notation numbers.
It supports boolean which can be either true or fasle.

Boolean : true or false.

Null: It supports null which essentially stands for nothing.

Arrays: which can be a list of any of the types that we have talked about
[1,2,3] ["Hello","World"]

The Object:
The Object is the most complex but most used type within JSON And allows you to represent values
that are key-value pairs so you give it a key and then a value and that value can be anything of 
the other types we have talked about so string,number,boolean,array and any of those different
types can be the value for a key,so lets dive into the example.

Objects: {"key":"value"} {"age":30}

of how to use JSON inside of a file,the first thing that we need to do is to create a file
with the .json extension at the end of your file.
Inside the JSON file, what you do is take one of the types that we talked about.
and put that inside of a file so for example you could put a string you could put a number,
put a boolean whatever type you want inside of that file and thats valid JSON.
But if you all have a single string or a single number,it's not very useful to have a whole file 
for that single input so what most of the time when you are working with JSON,you will have either an 
array or an object as your top level of your file and then inside of that array or object 
you will have other values,so it may even have other objects have other arrays or have 
individual values such as strings or numbers inside of that so lets take an example of a user 
object that we want to put at the top level of our JSON file,which we are going to call user.json.

To create an object we need { } braces and inside of that we put all of the key value pairs,
that make up our object and every single one of those key-value pairs,the key must be surrounded
by double quotes " " followed by a colon and the value for that key.
{
"key":"value",
"key":"value"
}

And then if we have multiple key value pairs we need commas seperating every single one of our
key-value pairs.Similarly,to how we would create an array in a normal programming language.

For eg.

uer.json
{
  "name":"Kyle",//Strings
  "favoriteNumber":3,//Number
  "isProgrammer":true,//Boolean
  "hobbies":["Weight Lifting","Bowling"],//Array
   "friends":[{    
     "name":"Kyle",//Strings
     "favoriteNumber":3,//Number
     "isProgrammer":true,//Boolean
     "friends":[...],//Array
     }]
}
// More user Objects inside of that array.So we can put different user objects inside of that
array and now we have nesting of arrays with objects and thats how you really get into the 
power of JSON where you can start to deeply nest different properties and really show a heirarchy of
data as opposed to just a flat format of data like most data format files give you.
For eg the "friends" array could have a friends array and it can have the same properties of name
,favoriteNumber,isProgrammer,hobbies and even friends inside of that and you can start to get a
very deeply nested array,if you really want it.
We don't put a , on the very last property value,key pair we have.
Close it with a curly brace and thats our full JSON file created.

Most of the time when you are dealing with JSON,you are going to get it back as a string
and not as an actual Javascript Object.

To emulate that lets surround that in backticks ``.

      `[
            {
                "name": "Big Corporation",
                "numberOfEmployees": 10000,
                "ceo": "Mary",
                "rating": 3.6
            },
            {

                "name": "Small Startup",
                "numberOfEmployees": 3,
                "ceo": null,
                "rating": 4.2
            }
        ]`

console.log(companies);
And we can check that out inside of our browser here as you can see we have logged the companies 
variable.
0: {name: "Big Corporation", numberOfEmployees: 10000, ceo: "Mary", rating: 3.6}
1: {name: "Small Startup", numberOfEmployees: 3, ceo: null, rating: 4.2}

Most of the time when you are dealing with JSON,you are going to get it back as a string and 
not as an actual Javascript Object,so to emulate that will surround this in backticks '',so 
there is an actual string and if you save that you will see that our console just has a string
instead of an actual object and we can't actually use this object inside of our Javascript.

So,in order to convert this JSON String into a Javascript Object we need to use whats called
JSON.parse
console.log(JSON.parse(companies));
We pass it a string.It will take that string and convert it into a Javascript Object.
0: {name: "Big Corporation", numberOfEmployees: 10000, ceo: "Mary", rating: 3.6}
1: {name: "Small Startup", numberOfEmployees: 3, ceo: null, rating: 4.2}

it extremely light weight so when you send it across the internet through different API's,it will
take a very little amount of space which means it will quickly send back and forth which gives 
your user a great end experience.

In order to use JSON and consume JSON.









